version: '2.23.3'

services:

  zoo1:
    image: confluentinc/cp-zookeeper:7.3.2
    hostname: zoo1
    container_name: zoo1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo1:2888:3888
    restart: on-failure


  kafka1:
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka1
    container_name: kafka1
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    restart: on-failure
    depends_on:
      - zoo1

  kafka2:
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka2
    container_name: kafka2
    ports:
      - "9093:9093"
      - "29093:29093"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka2:19093,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9093,DOCKER://host.docker.internal:29093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 2
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    restart: on-failure
    depends_on:
      - zoo1


  kafka3:
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka3
    container_name: kafka3
    ports:
      - "9094:9094"
      - "29094:29094"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka3:19094,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9094,DOCKER://host.docker.internal:29094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 3
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    restart: on-failure
    depends_on:
      - zoo1


  
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    volumes:
      - ./prometheus:/etc/prometheus

  kafka_setupper:
    build:
      context: ./deployment/kafka_setupper-image
    restart: on-failure
    ports:
      - "8092:80"
    container_name: kafka_setupper
    depends_on:
      - kafka1
      - kafka2 
      - kafka3


    
  mongo_input:
    build:
      context: ./deployment/mongo_input-image
    ports:
      - "8081:80"
    container_name: mongo_input
    restart: on-failure
    depends_on:
        mongodb:
          condition: service_started
        kafka_setupper:
          condition: service_completed_successfully
    


  mongo_output:
    build:
      context: ./deployment/mongo_output-image
    ports:
      - "8082:80"
    container_name: mongo_output
    restart: on-failure
    depends_on:
        mongodb:
          condition: service_started
        kafka_setupper:
          condition: service_completed_successfully

  mongo_updater:
    build:
      context: ./deployment/mongo_updater-image
    ports:
      - "8083:80"
    container_name: mongo_updater
    restart: on-failure
    depends_on:
        mongodb:
          condition: service_started
        kafka_setupper:
          condition: service_completed_successfully

  open_weather:
    build:
      context: ./deployment/open_weather-image
    ports:
      - "8084:80"
    container_name: open_weather
    restart: on-failure
    depends_on:
        mongodb:
          condition: service_started
        mysql:
          condition: service_started
        kafka_setupper:
          condition: service_completed_successfully

  sql_operation_constraint:
    build:
      context: ./deployment/sql_operation_constraint-image
    ports:
      - "8085:80"
    container_name: sql_operation_constraint
    restart: on-failure
    depends_on:
        mongodb:
          condition: service_started
        mysql:
          condition: service_started
        kafka_setupper:
          condition: service_completed_successfully

  sql_operation_list:
    build:
      context: ./deployment/sql_operation_list-image
    ports:
      - "8086:80"
    container_name: sql_operation_list
    restart: on-failure
    depends_on:
        mysql:
          condition: service_started
        kafka_setupper:
          condition: service_completed_successfully

  sql_user:
    build:
      context: ./deployment/sql_user-image
    ports:
      - "8087:80"
    container_name: sql_user
    restart: on-failure
    depends_on:
        mysql:
          condition: service_started
        kafka_setupper:
          condition: service_completed_successfully


  telegram_bot_constructor:
    build:
      context: ./deployment/telegram_bot_constructor-image
    ports:
      - "8088:80"
    container_name: telegram_bot_constructor
    restart: on-failure
    depends_on:
        mysql:
          condition: service_started
        kafka_setupper:
          condition: service_completed_successfully


  telegram_bot_reader:
    build:
      context: ./deployment/telegram_bot_reader-image
    ports:
      - "8089:80"
    container_name: telegram_bot_reader
    restart: on-failure
    depends_on:
        mysql:
          condition: service_started
        kafka_setupper:
          condition: service_completed_successfully


  telegram_bot_writer:
    build:
      context: ./deployment/telegram_bot_writer-image
    ports:
      - "8090:80"
    container_name: telegram_bot_writer
    restart: on-failure
    depends_on:
        mysql:
          condition: service_started
        kafka_setupper:
          condition: service_completed_successfully


  user_prevision:
    build:
      context: ./deployment/user_prevision-image
    ports:
      - "8091:80"
    container_name: user_prevision
    restart: on-failure
    depends_on:
        mysql:
          condition: service_started
        kafka_setupper:
          condition: service_completed_successfully


  mysql:
    image: mysql:latest
    restart: on-failure
    environment:
      MYSQL_ROOT_PASSWORD: 
      MYSQL_DATABASE: dsds
      MYSQL_USER: root
      MYSQL_PASSWORD: 
    ports:
      - "3306:3306"

  mongodb:
    image: mongo:latest
    environment:
      MONGO_INITDB_ROOT_USERNAME: aldo
      MONGO_INITDB_ROOT_PASSWORD: wpw_T3w@ADvD@j7
      MONGO_INITDB_DATABASE: cluster0
    ports:
      - "27017:27017"
    


    
  